import os
import logging
import sqlite3
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.getenv('BOT_TOKEN')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1037687787'))
CHANNEL_ID = os.getenv('CHANNEL_ID', '@moto_zapchasti_2025')
AVITO_PROFILE_URL = os.getenv('AVITO_PROFILE_URL', 'https://www.avito.ru/brands/2ed22a54a96def6579e6debbaddd4441')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, YANDEX_API_KEY, YANDEX_FOLDER_ID]):
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, YANDEX_API_KEY, YANDEX_FOLDER_ID")

AVITO_PROFILE_NAME = "VALERIYA market"

# URL –¥–ª—è Web App (–≤–∞—à GitHub Pages)
WEB_APP_URL = "https://8spnt8fppj-bit.github.io/moto-shop-webapp/"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
current_dir = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(current_dir, 'moto_shop.db')

# === YANDEX GPT –ì–ï–ù–ï–†–ê–¢–û–† ===
class YandexGPTGenerator:
    def __init__(self, api_key, folder_id):
        self.api_key = api_key
        self.folder_id = folder_id
        self.url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    
    def generate_product_description(self, product_name, category):
        headers = {
            "Authorization": f"Api-Key {self.api_key}",
            "Content-Type": "application/json"
        }
        
        prompt = f"""
        –°–æ–∑–¥–∞–π –ø—Ä–æ–¥–∞—é—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è —Ç–æ–≤–∞—Ä–∞ "{product_name}" –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ "{category}".

        –§–æ—Ä–º–∞—Ç:
        üèçÔ∏è [–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏]
        
        [–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤]
        
        üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
        ‚Ä¢ [—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 1]
        ‚Ä¢ [—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 2] 
        ‚Ä¢ [—Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞ 3]
        
        üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
        ‚Ä¢ [–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 1]
        ‚Ä¢ [–ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–æ 2]
        
        üöÄ [–ü—Ä–∏–∑—ã–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é]
        
        –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
        """
        
        data = {
            "modelUri": f"gpt://{self.folder_id}/yandexgpt/latest",
            "completionOptions": {
                "stream": False,
                "temperature": 0.7,
                "maxTokens": 1000
            },
            "messages": [
                {
                    "role": "system", 
                    "text": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –º–æ—Ç–æ-–∑–∞–ø—á–∞—Å—Ç—è–º. –°–æ–∑–¥–∞–≤–∞–π –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Telegram –∫–∞–Ω–∞–ª–∞."
                },
                {
                    "role": "user",
                    "text": prompt
                }
            ]
        }
        
        try:
            response = requests.post(self.url, headers=headers, json=data, timeout=30)
            if response.status_code == 200:
                result = response.json()
                return result['result']['alternatives'][0]['message']['text']
            else:
                logging.error(f"Yandex API error: {response.status_code}")
                return self.get_fallback_description(product_name, category)
        except Exception as e:
            logging.error(f"Yandex API connection error: {str(e)}")
            return self.get_fallback_description(product_name, category)
    
    def get_fallback_description(self, product_name, category):
        return f"""üèçÔ∏è {product_name}

–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∑–∞–ø—á–∞—Å—Ç—å –¥–ª—è –≤–∞—à–µ–≥–æ –º–æ—Ç–æ—Ü–∏–∫–ª–∞ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}.

üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ–º –º–æ–¥–µ–ª–µ–π
‚Ä¢ –ü—Ä–æ—Å—Ç–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏

üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –ù–∞–¥–µ–∂–Ω–æ—Å—Ç—å –∏ –¥–æ–ª–≥–æ–≤–µ—á–Ω–æ—Å—Ç—å
‚Ä¢ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∏ –∫–∞—á–µ—Å—Ç–≤–∞
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è

üöÄ –ó–∞–∫–∞–∂–∏—Ç–µ —Å–µ–π—á–∞—Å –∏ —É–ª—É—á—à–∏—Ç–µ —Å–≤–æ–π –º–æ—Ç–æ—Ü–∏–∫–ª!"""

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL UNIQUE
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                name TEXT NOT NULL,
                description TEXT,
                price INTEGER,
                photo TEXT,
                published BOOLEAN DEFAULT FALSE,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        ''')
        
        # –¢–æ–ª—å–∫–æ –¥–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: –¢—é–Ω–∏–Ω–≥ –∏ –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã
        categories = [
            (1, 'üèçÔ∏è –¢—é–Ω–∏–Ω–≥'),
            (2, 'üõ†Ô∏è –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã')
        ]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        cursor.execute("DELETE FROM categories")
        for cat_id, cat_name in categories:
            cursor.execute("INSERT INTO categories (id, name) VALUES (?, ?)", (cat_id, cat_name))
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–æ–≤–∞—Ä - –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 34 YJ
        cursor.execute("""
            INSERT OR IGNORE INTO products (id, category_id, name, description, price, photo) 
            VALUES (1, 2, '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 34 YJ', 
            'üèçÔ∏è –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 34 YJ

–í—ã—Å–æ–∫–æ–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤.

üîß –•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏:
‚Ä¢ –î–∏–∞–º–µ—Ç—Ä: 34–º–º
‚Ä¢ –¢–∏–ø: PWK
‚Ä¢ –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: Yamaha YJ
‚Ä¢ –ú–∞—Ç–µ—Ä–∏–∞–ª: –∞–ª—é–º–∏–Ω–∏–π

üí° –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
‚Ä¢ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏
‚Ä¢ –ü–ª–∞–≤–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –Ω–∞ –≤—Å–µ—Ö –æ–±–æ—Ä–æ—Ç–∞—Ö
‚Ä¢ –õ–µ–≥–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞
‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã

üöÄ –ò–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ç—é–Ω–∏–Ω–≥–∞ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤!', 4500, 'nibbi_pwk_34_yj.jpg')
        """)
        
        conn.commit()
        conn.close()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def get_categories():
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM categories ORDER BY id")
        categories = cursor.fetchall()
        conn.close()
        return categories
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

def get_products_by_category(category_id):
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, name, description, price, photo 
            FROM products 
            WHERE category_id = ? 
            ORDER BY id
        """, (category_id,))
        products = cursor.fetchall()
        conn.close()
        return products
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def get_all_products():
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.id, p.name, p.description, p.price, p.photo, c.name 
            FROM products p 
            JOIN categories c ON p.category_id = c.id 
            ORDER BY p.id
        """)
        products = cursor.fetchall()
        conn.close()
        return products
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def get_product_by_id(product_id):
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.id, p.name, p.description, p.price, p.photo, c.name 
            FROM products p 
            JOIN categories c ON p.category_id = c.id 
            WHERE p.id = ?
        """, (product_id,))
        product = cursor.fetchone()
        conn.close()
        return product
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        return None

def add_product_to_db(category_id, name, description, price, photo="No photo", published=False):
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("""
            INSERT INTO products (category_id, name, description, price, photo, published) 
            VALUES (?, ?, ?, ?, ?, ?)
        """, (category_id, name, description, price, photo, published))
        product_id = cursor.lastrowid
        conn.commit()
        conn.close()
        return product_id
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        return None

# === Web App –ì–ï–ù–ï–†–ê–¶–ò–Ø ===
def generate_web_app_html():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è Web App"""
    products = get_all_products()
    
    html = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ú–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏ | –ú–∞–≥–∞–∑–∏–Ω</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f5f5f5; color: #333; }
            .container { max-width: 400px; margin: 0 auto; padding: 20px; }
            .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; border-radius: 15px; margin-bottom: 20px; }
            .header h1 { font-size: 24px; margin-bottom: 5px; }
            .product-card { background: white; border-radius: 15px; padding: 15px; margin-bottom: 15px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
            .product-image { width: 100%; height: 200px; background: #f0f0f0; border-radius: 10px; margin-bottom: 10px; display: flex; align-items: center; justify-content: center; color: #666; }
            .product-name { font-size: 18px; font-weight: bold; margin-bottom: 5px; }
            .product-price { font-size: 20px; font-weight: bold; color: #667eea; margin-bottom: 10px; }
            .product-description { font-size: 14px; color: #666; margin-bottom: 15px; line-height: 1.4; }
            .buy-button { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; border: none; padding: 12px 20px; border-radius: 25px; font-size: 16px; font-weight: bold; cursor: pointer; width: 100%; }
            .contact-info { background: white; border-radius: 15px; padding: 15px; margin-top: 20px; text-align: center; }
            .contact-button { background: #28a745; color: white; border: none; padding: 12px 20px; border-radius: 25px; font-size: 16px; font-weight: bold; cursor: pointer; width: 100%; margin-top: 10px; text-decoration: none; display: block; }
            .category-badge { background: #e9ecef; color: #495057; padding: 4px 8px; border-radius: 12px; font-size: 12px; margin-bottom: 8px; display: inline-block; }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üèçÔ∏è –ú–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏</h1>
                <p>–ú–∞–≥–∞–∑–∏–Ω —Ç—é–Ω–∏–Ω–≥–∞ –∏ –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä–æ–≤</p>
            </div>
    """
    
    if products:
        for product in products:
            product_id, name, description, price, photo, category_name = product
            clean_description = description.replace('*', '').replace('_', '').replace('`', '')
            short_description = clean_description[:100] + '...' if len(clean_description) > 100 else clean_description
            
            html += f"""
            <div class="product-card">
                <div class="category-badge">{category_name}</div>
                <div class="product-image">üì∑ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞</div>
                <div class="product-name">{name}</div>
                <div class="product-price">{price}‚ÇΩ</div>
                <div class="product-description">{short_description}</div>
                <button class="buy-button" onclick="buyProduct({product_id}, '{name}', {price})">
                    üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {price}‚ÇΩ
                </button>
            </div>
            """
    else:
        html += """
            <div class="product-card" style="text-align: center;">
                <div style="font-size: 48px; margin-bottom: 20px;">üòî</div>
                <div style="font-size: 18px; color: #666; margin-bottom: 10px;">–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>
            </div>
        """
    
    html += """
            <div class="contact-info">
                <h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
                <p>–¢–µ–ª–µ—Ñ–æ–Ω: +7 (918) 477-07-59</p>
                <p>Telegram: @moto_zapchastibot</p>
                <a href="https://t.me/moto_zapchastibot" class="contact-button">üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram</a>
            </div>
        </div>

        <script>
            function buyProduct(productId, productName, price) {
                const message = `–•–æ—á—É –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä: ${productName}\\n–¶–µ–Ω–∞: ${price}‚ÇΩ\\n\\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.`;
                const telegramUrl = `https://t.me/moto_zapchastibot?text=${encodeURIComponent(message)}`;
                window.open(telegramUrl, '_blank');
            }

            if (window.Telegram && Telegram.WebApp) {
                Telegram.WebApp.BackButton.show();
                Telegram.WebApp.BackButton.onClick(function() {
                    Telegram.WebApp.close();
                });
            }
        </script>
    </body>
    </html>
    """
    
    return html

def save_web_app_html():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –¥–ª—è Web App –≤ —Ñ–∞–π–ª"""
    html_content = generate_web_app_html()
    web_app_path = os.path.join(current_dir, 'index.html')
    
    with open(web_app_path, 'w', encoding='utf-8') as f:
        f.write(html_content)
    
    logging.info("‚úÖ Web App HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    return web_app_path

# === –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        web_app_button = InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
        
        keyboard = [
            [web_app_button],
            [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ –≤ –±–æ—Ç–µ", callback_data="catalog")],
            [InlineKeyboardButton("üì¶ –ü–æ–¥ –∑–∞–∫–∞–∑", callback_data="pre_order")],
            [InlineKeyboardButton("üõí –ù–∞—à Avito", url=AVITO_PROFILE_URL)],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consult")],
            [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞", callback_data="delivery")],
            [InlineKeyboardButton("üì± –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/moto_zapchasti_2025")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üèçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *–ú–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏* \\| *–æ–±–∑–æ—Ä—ã –∏ –º–∞–≥–∞–∑–∏–Ω*\\!\n\n"
            "üéØ *–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\\-–º–∞–≥–∞–∑–∏–Ω –≤ Telegram\\!*\n\n"
            "üõ†Ô∏è –¢—é–Ω–∏–Ω–≥ –∏ –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤\n"
            "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n"
            "üí≥ –£–¥–æ–±–Ω–∞—è –æ–ø–ª–∞—Ç–∞\n"
            "üîß –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –ø–æ–¥–±–æ—Ä—É\n\n"
            "üëâ *–ù–∞–∂–º–∏—Ç–µ \\\"üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\\\" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ\\!*",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "catalog":
            await show_categories(query)
        elif data == "pre_order":
            await query.edit_message_text(
                "üì¶ *–¢–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑*\n\n"
                "üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–¥ –∑–∞–∫–∞–∑:*\n"
                "‚Ä¢ –¢—é–Ω–∏–Ω–≥\\-–∫–æ–º–ø–ª–µ–∫—Ç—ã\n"
                "‚Ä¢ –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º—ã –≤—ã—Ö–ª–æ–ø–∞\n"
                "‚Ä¢ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–µ –±–ª–æ–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n\n"
                "‚è±Ô∏è *–°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è:* 1\\-2 –º–µ—Å—è—Ü–∞\n"
                "üí∞ *–ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞:* 30%\n\n"
                "üìû *–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ Telegram:* @moto\\_zapchastibot",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]),
                parse_mode='MarkdownV2'
            )
        elif data == "consult":
            await query.edit_message_text(
                "üìû *–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –∑–∞–∫–∞–∑:*\n\n"
                "üì± *–¢–µ–ª–µ—Ñ–æ–Ω:* \\+7 \\(918\\) 477\\-07\\-59\n"
                "ü§ñ *Telegram:* @moto\\_zapchastibot\n"
                "üõí *Avito:* VALERIYA market\n"
                "‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* 9:00\\-21:00\n\n"
                "–ú—ã –ø–æ–º–æ–∂–µ–º —Å –ø–æ–¥–±–æ—Ä–æ–º –∑–∞–ø—á–∞—Å—Ç–µ–π\\!",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]),
                parse_mode='MarkdownV2'
            )
        elif data == "delivery":
            await query.edit_message_text(
                "üöö *–î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞:*\n\n"
                "‚Ä¢ *–ü–æ –†–æ—Å—Å–∏–∏:* 3\\-14 –¥–Ω–µ–π\n"
                "‚Ä¢ *–¢–ö:* –°–î–≠–ö, –ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏\n"
                "‚Ä¢ *–û–ø–ª–∞—Ç–∞:* –∫–∞—Ä—Ç–∞/–Ω–∞–ª–∏—á–Ω—ã–µ/–æ–Ω–ª–∞–π–Ω\n"
                "‚Ä¢ *–ì–∞—Ä–∞–Ω—Ç–∏—è:* 30 –¥–Ω–µ–π\n"
                "‚Ä¢ *–°–∞–º–æ–≤—ã–≤–æ–∑:* –ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫\n\n"
                "üì¶ *–¢–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑:*\n"
                "‚Ä¢ –°—Ä–æ–∫: 1\\-2 –º–µ—Å—è—Ü–∞\n"
                "‚Ä¢ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 30%\n\n"
                "üí≥ *–û–Ω–ª–∞–π–Ω –æ–ø–ª–∞—Ç–∞:*\n"
                "‚Ä¢ –ë–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç–æ–π\n"
                "‚Ä¢ –ü–µ—Ä–µ–≤–æ–¥–æ–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n"
                "‚Ä¢ –ß–µ—Ä–µ–∑ –°–ë–ü\n\n"
                "üìû –£—Ç–æ—á–Ω–∏—Ç—å –¥–µ—Ç–∞–ª–∏: \\+7 \\(918\\) 477\\-07\\-59",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]]),
                parse_mode='MarkdownV2'
            )
        elif data == "back_to_categories":
            await show_categories(query)
        elif data.startswith("category_"):
            category_id = int(data.split("_")[1])
            await show_products(query, category_id)
        elif data == "back_to_start":
            await show_main_menu(query)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")

async def show_main_menu(query):
    try:
        web_app_button = InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
        
        keyboard = [
            [web_app_button],
            [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥ –≤ –±–æ—Ç–µ", callback_data="catalog")],
            [InlineKeyboardButton("üì¶ –ü–æ–¥ –∑–∞–∫–∞–∑", callback_data="pre_order")],
            [InlineKeyboardButton("üõí –ù–∞—à Avito", url=AVITO_PROFILE_URL)],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consult")],
            [InlineKeyboardButton("üöö –î–æ—Å—Ç–∞–≤–∫–∞ –∏ –æ–ø–ª–∞—Ç–∞", callback_data="delivery")],
            [InlineKeyboardButton("üì± –ù–∞—à –∫–∞–Ω–∞–ª", url="https://t.me/moto_zapchasti_2025")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üèçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—Ç–æ\\-–º–∞–≥–∞–∑–∏–Ω\\!\n\n"
            "üéØ *–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\\-–º–∞–≥–∞–∑–∏–Ω –≤ Telegram\\!*\n\n"
            "üëâ *–ù–∞–∂–º–∏—Ç–µ \\\"üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω\\\" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫—Ä–∞—Å–∏–≤–æ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ\\!*",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")

async def show_categories(query):
    try:
        categories = get_categories()
        
        keyboard = []
        for cat_id, cat_name in categories:
            keyboard.append([InlineKeyboardButton(cat_name, callback_data=f"category_{cat_id}")])
        
        keyboard.append([InlineKeyboardButton("üì¶ –¢–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑", callback_data="pre_order")])
        keyboard.append([InlineKeyboardButton("üõí –ù–∞—à Avito", url=AVITO_PROFILE_URL)])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
        
        await query.edit_message_text(
            "üèçÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n"
            "‚Ä¢ üèçÔ∏è –¢—é–Ω–∏–Ω–≥ \\- —Ç—é–Ω–∏–Ω–≥\\-–∫–æ–º–ø–ª–µ–∫—Ç—ã, –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n"
            "‚Ä¢ üõ†Ô∏è –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã \\- –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_categories: {e}")

async def show_products(query, category_id):
    try:
        products = get_products_by_category(category_id)
        
        if not products:
            keyboard = [
                [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä", callback_data="pre_order")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")]
            ]
            await query.edit_message_text(
                "üòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏\\.\n\n"
                "üì¶ *–ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å —ç—Ç–æ—Ç —Ç–æ–≤–∞—Ä\\!*\n"
                "‚è±Ô∏è –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 1\\-2 –º–µ—Å—è—Ü–∞\n"
                "üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 30%\n\n"
                "üìû –î–ª—è –∑–∞–∫–∞–∑–∞: \\+7 \\(918\\) 477\\-07\\-59",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='MarkdownV2'
            )
            return
        
        categories = get_categories()
        category_name = next((name for id, name in categories if id == category_id), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        
        text = f"üì¶ *{category_name} \\- –¢–æ–≤–∞—Ä—ã –≤ –Ω–∞–ª–∏—á–∏–∏:*\n\n"
        
        keyboard = []
        for product_id, name, description, price, photo in products:
            keyboard.append([InlineKeyboardButton(f"{name} - {price}‚ÇΩ", callback_data=f"product_{product_id}")])
        
        keyboard.append([InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä", callback_data="pre_order")])
        keyboard.append([InlineKeyboardButton("üõí –ù–∞—à Avito", url=AVITO_PROFILE_URL)])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="back_to_categories")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_products: {e}")

async def catalog_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∫ –∫–∞—Ç–∞–ª–æ–≥—É —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É"""
    await show_categories_direct(update)

async def show_categories_direct(update: Update):
    """–ü–æ–∫–∞–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        web_app_button = InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
        
        categories = get_categories()
        
        keyboard = []
        for cat_id, cat_name in categories:
            keyboard.append([InlineKeyboardButton(cat_name, callback_data=f"category_{cat_id}")])
        
        keyboard.append([web_app_button])
        keyboard.append([InlineKeyboardButton("üì¶ –¢–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑", callback_data="pre_order")])
        keyboard.append([InlineKeyboardButton("üõí –ù–∞—à Avito", url=AVITO_PROFILE_URL)])
        keyboard.append([InlineKeyboardButton("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_start")])
        
        await update.message.reply_text(
            "üèçÔ∏è *–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:*\n\n"
            "‚Ä¢ üèçÔ∏è –¢—é–Ω–∏–Ω–≥ \\- —Ç—é–Ω–∏–Ω–≥\\-–∫–æ–º–ø–ª–µ–∫—Ç—ã, –¥–æ—Ä–∞–±–æ—Ç–∫–∏\n"
            "‚Ä¢ üõ†Ô∏è –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã \\- –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã –∏ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ\n\n"
            "üéØ *–ò–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –∫—Ä–∞—Å–∏–≤—ã–π –º–∞–≥–∞–∑–∏–Ω —á–µ—Ä–µ–∑ Web App\\!*",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_categories_direct: {e}")

async def web_app_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ Web App"""
    try:
        web_app_button = InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
        
        reply_markup = InlineKeyboardMarkup([[web_app_button]])
        
        await update.message.reply_text(
            "üéØ *–û—Ç–∫—Ä–æ–π—Ç–µ –Ω–∞—à –∏–Ω—Ç–µ—Ä–Ω–µ—Ç\\-–º–∞–≥–∞–∑–∏–Ω –≤ Telegram\\!*\n\n"
            "–í –º–∞–≥–∞–∑–∏–Ω–µ –≤—ã –Ω–∞–π–¥–µ—Ç–µ:\n"
            "‚Ä¢ üì∑ –§–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤\n"
            "‚Ä¢ üí∞ –¶–µ–Ω—ã\n"
            "‚Ä¢ üìù –û–ø–∏—Å–∞–Ω–∏—è\n"
            "‚Ä¢ üí≥ –£–¥–æ–±–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω üëá",
            reply_markup=reply_markup,
            parse_mode='MarkdownV2'
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ web_app_command: {e}")

async def add_product(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å AI-–≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π"""
    try:
        user_id = update.effective_user.id
        
        if user_id != ADMIN_ID:
            await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
            return
        
        if not context.args or len(context.args) < 3:
            await update.message.reply_text(
                "üìù *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:*\n"
                "`/addproduct <–∫–∞—Ç–µ–≥–æ—Ä–∏—è_id> <–Ω–∞–∑–≤–∞–Ω–∏–µ> <—Ü–µ–Ω–∞>`\n\n"
                "*–ü—Ä–∏–º–µ—Ä:*\n"
                "`/addproduct 2 \"–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 34 YJ\" 4500`\n\n"
                "*–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:*\n"
                "1 \\- üèçÔ∏è –¢—é–Ω–∏–Ω–≥\n"
                "2 \\- üõ†Ô∏è –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã",
                parse_mode='MarkdownV2'
            )
            return
        
        category_id = int(context.args[0])
        product_name = " ".join(context.args[1:-1])
        price = int(context.args[-1])
        
        if category_id < 1 or category_id > 2:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –î–æ–ø—É—Å—Ç–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è: 1-2")
            return
        
        wait_msg = await update.message.reply_text("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ —á–µ—Ä–µ–∑ AI...")
        
        categories = get_categories()
        category_name = next((name for id, name in categories if id == category_id), "–º–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏")
        
        generator = YandexGPTGenerator(YANDEX_API_KEY, YANDEX_FOLDER_ID)
        description = generator.generate_product_description(product_name, category_name)
        
        product_id = add_product_to_db(category_id, product_name, description, price)
        
        await wait_msg.delete()
        
        if product_id:
            save_web_app_html()
            
            await update.message.reply_text(
                f"‚úÖ *–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω\\!*\n\n"
                f"üè∑Ô∏è –ù–∞–∑–≤–∞–Ω–∏–µ: {product_name}\n"
                f"üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                f"üí∞ –¶–µ–Ω–∞: {price}‚ÇΩ\n"
                f"üìã ID —Ç–æ–≤–∞—Ä–∞: {product_id}",
                parse_mode='MarkdownV2'
            )
        else:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑—É")
            
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã –∏–ª–∏ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ add_product: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞")

def main():
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if not init_db():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Web App HTML...")
        save_web_app_html()
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
        application = Application.builder().token(BOT_TOKEN).build()
        
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CommandHandler("webapp", web_app_command))
        application.add_handler(CommandHandler("catalog", catalog_command))
        application.add_handler(CommandHandler("addproduct", add_product))
        application.add_handler(CallbackQueryHandler(handle_callback))
        
        print("üü¢ –ú–æ—Ç–æ-–±–æ—Ç —Å Web App –∑–∞–ø—É—â–µ–Ω!")
        print("ü§ñ –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ Telegram")
        print("üõçÔ∏è Web App —Å–æ–∑–¥–∞–Ω: index.html")
        print("\n‚ö†Ô∏è –î–ê–õ–ï–ï: –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –≤ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ GitHub Pages")
        
        application.run_polling()
        
    except Exception as e:
        print(f"üî¥ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    main()
