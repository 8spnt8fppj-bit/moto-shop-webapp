import os
import logging
import sqlite3
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# === –ù–ê–°–¢–†–û–ô–ö–ò –ò–ó –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===
BOT_TOKEN = os.getenv('BOT_TOKEN')
YANDEX_API_KEY = os.getenv('YANDEX_API_KEY')
YANDEX_FOLDER_ID = os.getenv('YANDEX_FOLDER_ID')
ADMIN_ID = int(os.getenv('ADMIN_ID', '1037687787'))
CHANNEL_ID = os.getenv('CHANNEL_ID', '@moto_zapchasti_2025')
AVITO_PROFILE_URL = os.getenv('AVITO_PROFILE_URL', 'https://www.avito.ru/brands/2ed22a54a96def6579e6debbaddd4441')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
if not all([BOT_TOKEN, YANDEX_API_KEY, YANDEX_FOLDER_ID]):
    raise ValueError("–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: BOT_TOKEN, YANDEX_API_KEY, YANDEX_FOLDER_ID")

AVITO_PROFILE_NAME = "VALERIYA market"

# URL –¥–ª—è Web App (–≤–∞—à GitHub Pages)
WEB_APP_URL = "https://8spnt8fppj-bit.github.io/moto-shop-webapp/"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
current_dir = os.path.dirname(os.path.abspath(__file__))
db_path = os.path.join(current_dir, 'moto_shop.db')

# === –¢–û–í–ê–†–´ ===
PRODUCTS = [
    {
        'id': 1,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 34 YJ',
        'description': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 34 YJ - –¥–ª—è —Ç—é–Ω–∏–Ω–≥–∞ 350-400cc!\n\n–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–µ —Ä–∞—Å–∫—Ä—ã–≤–∞–µ—Ç –≤–µ—Å—å –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª? PWK 34 YJ - —ç—Ç–æ –ø–ª–æ—Å–∫–æ–¥—Ä–æ—Å—Å–µ–ª—å–Ω—ã–π –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–µ—Ä—å–µ–∑–Ω–æ–≥–æ —Ç—é–Ω–∏–Ω–≥–∞ –º–æ—Ç–æ—Ä–æ–≤ 350-400cc.\n\n–ß—Ç–æ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ:\n‚úÖ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫\n‚úÖ –ú–æ—â–Ω—ã–π –ø–æ–¥—Ö–≤–∞—Ç\n‚úÖ –¢–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞\n\nüí¨ –í–Ω–∏–º–∞–Ω–∏–µ! –î–ª—è —Ä–∞—Å–∫—Ä—ã—Ç–∏—è –≤—Å–µ–≥–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª–∞ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è —Ç–æ—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.',
        'price': 7800
    },
    {
        'id': 2,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 36 YJ',
        'description': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 36 YJ - –º–∞–∫—Å. –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å!\n\n–î–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö –º–æ—â–Ω–æ—Å—Ç–µ–π –∏ –≥–æ–Ω–æ—á–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤!',
        'price': 7000
    },
    {
        'id': 3,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PE 30',
        'description': '–ú–æ—â–Ω–æ—Å—Ç—å –±–µ–∑ —Å–ª–æ–∂–Ω–æ—Å—Ç–µ–π! PE 30 - —ç—Ç–æ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–∞–¥–µ–∂–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à—Ç–∞—Ç–Ω—ã—Ö –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä–æ–≤.',
        'price': 7000
    },
    {
        'id': 4,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 32 YJ',
        'description': '–ú–æ—â–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞! PWK 32 - –≤—ã–±–æ—Ä –¥–ª—è –º–æ—Ç–æ—Ä–æ–≤ 250-350cc.',
        'price': 7000
    },
    {
        'id': 5,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PE 22',
        'description': '–ù–∞–¥–µ–∂–Ω–∞—è –∑–∞–º–µ–Ω–∞ —à—Ç–∞—Ç–Ω–æ–≥–æ –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä–∞! PE 22 - —ç—Ç–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –ª–µ–≥–∫–∏–π –∑–∞–ø—É—Å–∫.',
        'price': 7000
    },
    {
        'id': 6,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 24',
        'description': '–ú–æ—â–Ω–æ—Å—Ç—å –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å –¥–ª—è 125-150cc! –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π, –Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–π PWK 24.',
        'price': 7000
    },
    {
        'id': 7,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 26',
        'description': '–ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–ª—è —Ç—é–Ω–∏–Ω–≥–∞ 150-200cc! PWK 26 —Å–æ—á–µ—Ç–∞–µ—Ç –º–æ—â—å –∏ —É–ø—Ä–∞–≤–ª—è–µ–º–æ—Å—Ç—å.',
        'price': 7000
    },
    {
        'id': 8,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PE 26',
        'description': '–ò–¥–µ–∞–ª—å–Ω—ã–π –∞–ø–≥—Ä–µ–π–¥ —à—Ç–∞—Ç–Ω–æ–≥–æ –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä–∞! PE 26 —Ä–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –∑–∞–ø—É—Å–∫–æ–º.',
        'price': 7000
    },
    {
        'id': 9,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PE 28',
        'description': '–ü—Ä–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –¥–ª—è –º–æ—Ç–æ—Ä–æ–≤ 200-250cc! –°—Ç–∞–±–∏–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –≤ –ª—é–±—ã—Ö —É—Å–ª–æ–≤–∏—è—Ö.',
        'price': 7000
    },
    {
        'id': 10,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 28 YJ',
        'description': '–ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π –ø–æ–¥—Ö–≤–∞—Ç! –ó–æ–ª–æ—Ç–∞—è —Å–µ—Ä–µ–¥–∏–Ω–∞ –¥–ª—è —Ç—é–Ω–∏–Ω–≥–∞.',
        'price': 7000
    },
    {
        'id': 11,
        'category_id': 2,
        'name': '–ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä Nibbi PWK 38',
        'description': '–î–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤! PWK 38 - –≤—ã–±–æ—Ä –¥–ª—è —Å–∏–ª—å–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–æ—Ç–æ—Ä–æ–≤.',
        'price': 7000
    }
]

# === –ë–ê–ó–ê –î–ê–ù–ù–´–• ===
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS categories (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL UNIQUE
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ —Ç–æ–≤–∞—Ä–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS products (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                category_id INTEGER,
                name TEXT NOT NULL,
                description TEXT,
                price INTEGER,
                photo TEXT,
                published BOOLEAN DEFAULT FALSE,
                FOREIGN KEY (category_id) REFERENCES categories (id)
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS orders (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                user_name TEXT,
                product_id INTEGER,
                product_name TEXT,
                price INTEGER,
                customer_name TEXT,
                customer_phone TEXT,
                customer_address TEXT,
                delivery_method TEXT,
                status TEXT DEFAULT 'new',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY (product_id) REFERENCES products (id)
            )
        ''')
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = [
            (1, 'üèçÔ∏è –¢—é–Ω–∏–Ω–≥'),
            (2, 'üõ†Ô∏è –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã')
        ]
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        cursor.execute("DELETE FROM categories")
        for cat_id, cat_name in categories:
            cursor.execute("INSERT OR IGNORE INTO categories (id, name) VALUES (?, ?)", (cat_id, cat_name))
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        cursor.execute("DELETE FROM products")
        for product in PRODUCTS:
            cursor.execute("""
                INSERT INTO products (id, category_id, name, description, price, photo) 
                VALUES (?, ?, ?, ?, ?, ?)
            """, (product['id'], product['category_id'], product['name'], 
                  product['description'], product['price'], 'nibbi.jpg'))
        
        conn.commit()
        conn.close()
        logging.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        return False

def get_categories():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("SELECT id, name FROM categories ORDER BY id")
        categories = cursor.fetchall()
        conn.close()
        return categories
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
        return []

def get_products_by_category(category_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT id, name, description, price, photo 
            FROM products 
            WHERE category_id = ? 
            ORDER BY id
        """, (category_id,))
        products = cursor.fetchall()
        conn.close()
        return products
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤: {e}")
        return []

def get_product_by_id(product_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–æ–≤–∞—Ä –ø–æ ID"""
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        cursor.execute("""
            SELECT p.id, p.name, p.description, p.price, p.photo, c.name 
            FROM products p 
            JOIN categories c ON p.category_id = c.id 
            WHERE p.id = ?
        """, (product_id,))
        product = cursor.fetchone()
        conn.close()
        return product
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞: {e}")
        return None

def create_order(user_id, user_name, product_id, product_name, price, customer_name, customer_phone, customer_address, delivery_method):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑"""
    try:
        conn = sqlite3.connect(db_path, check_same_thread=False)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO orders (user_id, user_name, product_id, product_name, price, customer_name, customer_phone, customer_address, delivery_method)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (user_id, user_name, product_id, product_name, price, customer_name, customer_phone, customer_address, delivery_method))
        
        order_id = cursor.lastrowid
        conn.commit()
        conn.close()
        
        logging.info(f"‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω: ID {order_id} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        return order_id
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")
        return None

# === Web App –ì–ï–ù–ï–†–ê–¶–ò–Ø ===
def generate_web_app_html():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç HTML –¥–ª—è Web App"""
    products = []
    for category_id in [1, 2]:
        products.extend(get_products_by_category(category_id))
    
    html = """
    <!DOCTYPE html>
    <html lang="ru">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>–ú–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏ | –ú–∞–≥–∞–∑–∏–Ω</title>
        <style>
            * { margin: 0; padding: 0; box-sizing: border-box; }
            body { 
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; 
                background: #f5f5f5; 
                color: #333;
            }
            .container { 
                max-width: 400px; 
                margin: 0 auto; 
                padding: 20px; 
            }
            .header { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; 
                padding: 20px; 
                text-align: center; 
                border-radius: 15px; 
                margin-bottom: 20px;
                box-shadow: 0 4px 15px rgba(0,0,0,0.1);
            }
            .product-card { 
                background: white; 
                border-radius: 15px; 
                padding: 15px; 
                margin-bottom: 15px; 
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .product-image { 
                width: 100%; 
                height: 200px; 
                background: #f0f0f0; 
                border-radius: 10px; 
                margin-bottom: 10px; 
                display: flex; 
                align-items: center; 
                justify-content: center; 
                color: #666;
            }
            .product-name { 
                font-size: 18px; 
                font-weight: bold; 
                margin-bottom: 5px; 
            }
            .product-price { 
                font-size: 20px; 
                font-weight: bold; 
                color: #667eea; 
                margin-bottom: 10px; 
            }
            .product-description { 
                font-size: 14px; 
                color: #666; 
                margin-bottom: 15px; 
                line-height: 1.4; 
            }
            .buy-button { 
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); 
                color: white; 
                border: none; 
                padding: 12px 20px; 
                border-radius: 25px; 
                font-size: 16px; 
                font-weight: bold; 
                cursor: pointer; 
                width: 100%;
            }
            .contact-info { 
                background: white; 
                border-radius: 15px; 
                padding: 15px; 
                margin-top: 20px; 
                text-align: center;
                box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            }
            .contact-button { 
                background: #28a745; 
                color: white; 
                border: none; 
                padding: 12px 20px; 
                border-radius: 25px; 
                font-size: 16px; 
                font-weight: bold; 
                cursor: pointer; 
                width: 100%; 
                margin-top: 10px; 
                text-decoration: none; 
                display: block; 
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üèçÔ∏è –ú–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–∏</h1>
                <p>–ú–∞–≥–∞–∑–∏–Ω —Ç—é–Ω–∏–Ω–≥–∞ –∏ –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä–æ–≤</p>
            </div>
    """
    
    if products:
        for product in products:
            product_id, name, description, price, photo = product
            clean_description = description.replace('*', '').replace('_', '').replace('`', '')
            short_description = clean_description[:100] + '...' if len(clean_description) > 100 else clean_description
            
            html += f"""
            <div class="product-card">
                <div class="product-image">üèçÔ∏è –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä</div>
                <div class="product-name">{name}</div>
                <div class="product-price">{price}‚ÇΩ</div>
                <div class="product-description">{short_description}</div>
                <button class="buy-button" onclick="buyProduct('{name}', {price})">
                    üí≥ –ö—É–ø–∏—Ç—å –∑–∞ {price}‚ÇΩ
                </button>
            </div>
            """
    else:
        html += """
            <div class="product-card" style="text-align: center;">
                <div style="font-size: 48px; margin-bottom: 20px;">üòî</div>
                <div style="font-size: 18px; color: #666; margin-bottom: 10px;">–¢–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</div>
            </div>
        """
    
    html += """
            <div class="contact-info">
                <h3>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã</h3>
                <p>–¢–µ–ª–µ—Ñ–æ–Ω: +7 (918) 477-07-59</p>
                <p>Telegram: @moto_zapchastibot</p>
                <button class="contact-button" onclick="contactTelegram()">
                    üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –≤ Telegram
                </button>
            </div>
        </div>

        <script>
            function buyProduct(productName, price) {
                const message = `–ó–∞–∫–∞–∑ –∏–∑ Web-App: ${productName} - ${price}‚ÇΩ`;
                if (window.Telegram && Telegram.WebApp) {
                    Telegram.WebApp.sendData(JSON.stringify({
                        action: 'order',
                        product: productName,
                        price: price
                    }));
                } else {
                    const telegramUrl = `https://t.me/moto_zapchastibot?start=webapp_order&text=${encodeURIComponent(message)}`;
                    window.open(telegramUrl, '_blank');
                }
            }

            function contactTelegram() {
                const telegramUrl = 'https://t.me/moto_zapchastibot';
                if (window.Telegram && Telegram.WebApp) {
                    Telegram.WebApp.openTelegramLink(telegramUrl);
                } else {
                    window.open(telegramUrl, '_blank');
                }
            }

            if (window.Telegram && Telegram.WebApp) {
                Telegram.WebApp.expand();
                Telegram.WebApp.BackButton.show();
                Telegram.WebApp.BackButton.onClick(function() {
                    Telegram.WebApp.close();
                });
            }
        </script>
    </body>
    </html>
    """
    
    return html

def save_web_app_html():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç HTML –¥–ª—è Web App –≤ —Ñ–∞–π–ª"""
    try:
        html_content = generate_web_app_html()
        web_app_path = os.path.join(current_dir, 'index.html')
        
        with open(web_app_path, 'w', encoding='utf-8') as f:
            f.write(html_content)
        
        logging.info("‚úÖ Web App HTML —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        return True
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è Web App: {e}")
        return False

# === –°–ò–°–¢–ï–ú–ê –ó–ê–ö–ê–ó–û–í ===
async def start_order_flow(update: Update, context: ContextTypes.DEFAULT_TYPE, product_id=None):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    try:
        query = update.callback_query
        user_id = query.from_user.id
        
        if product_id is None:
            product_id = context.user_data.get('order_product_id')
        
        product = get_product_by_id(product_id)
        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        product_id, name, description, price, photo, category_name = product
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ
        context.user_data['order_product_id'] = product_id
        context.user_data['order_price'] = price
        context.user_data['order_product_name'] = name
        context.user_data['waiting_for_name'] = True
        
        await query.edit_message_text(
            f"üõí *–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n"
            f"üè∑Ô∏è *–¢–æ–≤–∞—Ä:* {name}\n"
            f"üí∞ *–¶–µ–Ω–∞:* {price}‚ÇΩ\n\n"
            f"üìù *–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ:*\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ *–§–ò–û*:",
            parse_mode='Markdown',
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"product_{product_id}")]
            ])
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ start_order_flow: {e}")
        await update.callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞", show_alert=True)

async def handle_name_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –§–ò–û"""
    try:
        if not context.user_data.get('waiting_for_name'):
            return
        
        customer_name = update.message.text
        context.user_data['customer_name'] = customer_name
        context.user_data['waiting_for_name'] = False
        context.user_data['waiting_for_phone'] = True
        
        await update.message.reply_text(
            f"‚úÖ *–§–ò–û –ø–æ–ª—É—á–µ–Ω–æ:* {customer_name}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à *–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞*:",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_name_input: {e}")

async def handle_phone_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    try:
        if not context.user_data.get('waiting_for_phone'):
            return
        
        customer_phone = update.message.text
        context.user_data['customer_phone'] = customer_phone
        context.user_data['waiting_for_phone'] = False
        context.user_data['waiting_for_address'] = True
        
        await update.message.reply_text(
            f"‚úÖ *–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–µ–Ω:* {customer_phone}\n\n"
            f"–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ *–∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏*:",
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_phone_input: {e}")

async def handle_address_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∞–¥—Ä–µ—Å–∞"""
    try:
        if not context.user_data.get('waiting_for_address'):
            return
        
        customer_address = update.message.text
        context.user_data['customer_address'] = customer_address
        context.user_data['waiting_for_address'] = False
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
        user_id = update.effective_user.id
        user_name = update.effective_user.first_name
        product_id = context.user_data.get('order_product_id')
        product_name = context.user_data.get('order_product_name')
        price = context.user_data.get('order_price')
        customer_name = context.user_data.get('customer_name')
        customer_phone = context.user_data.get('customer_phone')
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ
        order_id = create_order(
            user_id=user_id,
            user_name=user_name,
            product_id=product_id,
            product_name=product_name,
            price=price,
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_address=customer_address,
            delivery_method="—É—Ç–æ—á–Ω–∏—Ç—å"
        )
        
        if order_id:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            order_message = (
                f"üõí *–ù–û–í–´–ô –ó–ê–ö–ê–ó!* ‚Ññ{order_id}\n\n"
                f"üè∑Ô∏è *–¢–æ–≤–∞—Ä:* {product_name}\n"
                f"üí∞ *–¶–µ–Ω–∞:* {price}‚ÇΩ\n"
                f"üë§ *–§–ò–û:* {customer_name}\n"
                f"üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* {customer_phone}\n"
                f"üè† *–ê–¥—Ä–µ—Å:* {customer_address}\n\n"
                f"üë§ *–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:* {user_name}\n"
                f"üÜî *ID:* {user_id}"
            )
            
            try:
                await context.bot.send_message(
                    chat_id=ADMIN_ID,
                    text=order_message,
                    parse_mode='Markdown'
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–¥–º–∏–Ω—É: {e}")
            
            # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await update.message.reply_text(
                f"üéâ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!* ‚Ññ{order_id}\n\n"
                f"‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑!\n\n"
                f"üìû *–î–ª—è —Å–≤—è–∑–∏:* +7 (918) 477-07-59\n"
                f"‚è∞ *–í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:* 1-2 —á–∞—Å–∞\n\n"
                f"–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode='Markdown'
            )
        else:
            await update.message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏: +7 (918) 477-07-59",
                parse_mode='Markdown'
            )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
        context.user_data.clear()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_address_input: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")

# === –û–°–ù–û–í–ù–´–ï –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∏–∑ Web App
        if context.args and len(context.args) > 0:
            start_arg = context.args[0]
            if start_arg == 'webapp_order':
                await update.message.reply_text(
                    "üõí *–ó–∞–∫–∞–∑ –∏–∑ Web-App*\n\n"
                    "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –≤ –∫–∞—Ç–∞–ª–æ–≥–µ –±–æ—Ç–∞:",
                    parse_mode='Markdown',
                    reply_markup=InlineKeyboardMarkup([
                        [InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥", callback_data="catalog")]
                    ])
                )
                return
        
        web_app_button = InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
        
        keyboard = [
            [web_app_button],
            [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton("üì¶ –ü–æ–¥ –∑–∞–∫–∞–∑", callback_data="pre_order")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üèçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –º–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–µ–π!\n\n"
            "üõ†Ô∏è –¢—é–Ω–∏–Ω–≥ –∏ –∫–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã –¥–ª—è –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤\n"
            "üì¶ –î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏\n\n"
            "üëâ –ù–∞–∂–º–∏—Ç–µ 'üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω' –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç–æ–≤–∞—Ä–æ–≤!",
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–æ–≤"""
    try:
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "catalog":
            await show_categories(query)
        elif data == "pre_order":
            await query.edit_message_text(
                "üì¶ *–¢–æ–≤–∞—Ä—ã –ø–æ–¥ –∑–∞–∫–∞–∑*\n\n"
                "üîß –ú—ã –º–æ–∂–µ–º –Ω–∞–π—Ç–∏ –∏ –ø—Ä–∏–≤–µ–∑—Ç–∏ –ø–æ–¥ –∑–∞–∫–∞–∑:\n"
                "‚Ä¢ –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π\n" 
                "‚Ä¢ –¢—é–Ω–∏–Ω–≥-–∫–æ–º–ø–ª–µ–∫—Ç—ã\n"
                "‚Ä¢ –ò –º–Ω–æ–≥–æ–µ –¥—Ä—É–≥–æ–µ!\n\n"
                "‚è±Ô∏è –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è: 1-2 –º–µ—Å—è—Ü–∞\n"
                "üí∞ –ü—Ä–µ–¥–æ–ø–ª–∞—Ç–∞: 30%\n\n"
                "üìû –î–ª—è –∑–∞–∫–∞–∑–∞: +7 (918) 477-07-59",
                parse_mode='Markdown',
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]])
            )
        elif data == "contacts":
            await query.edit_message_text(
                "üìû *–ö–æ–Ω—Ç–∞–∫—Ç—ã*\n\n"
                "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (918) 477-07-59\n"
                "ü§ñ Telegram: @moto_zapchastibot\n"
                "‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: 9:00-21:00",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")]])
            )
        elif data == "back_to_start":
            await show_main_menu(query)
        elif data == "back_to_categories":
            await show_categories(query)
        elif data.startswith("category_"):
            category_id = int(data.split("_")[1])
            await show_products(query, category_id)
        elif data.startswith("product_"):
            product_id = int(data.split("_")[1])
            await show_product(query, product_id)
        elif data.startswith("buy_"):
            product_id = int(data.split("_")[1])
            await start_order_flow(update, context, product_id)
        elif data == "cancel_order":
            context.user_data.clear()
            await query.edit_message_text(
                "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.",
                parse_mode='Markdown'
            )
                
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ callback: {e}")

async def show_main_menu(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        web_app_button = InlineKeyboardButton(
            "üõçÔ∏è –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", 
            web_app=WebAppInfo(url=WEB_APP_URL)
        )
        
        keyboard = [
            [web_app_button],
            [InlineKeyboardButton("üõí –ö–∞—Ç–∞–ª–æ–≥", callback_data="catalog")],
            [InlineKeyboardButton("üì¶ –ü–æ–¥ –∑–∞–∫–∞–∑", callback_data="pre_order")],
            [InlineKeyboardButton("üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="contacts")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            "üèçÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∞–∑–∏–Ω –º–æ—Ç–æ –∑–∞–ø—á–∞—Å—Ç–µ–π!",
            reply_markup=reply_markup
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_main_menu: {e}")

async def show_categories(query):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤"""
    try:
        categories = get_categories()
        
        keyboard = []
        for cat_id, cat_name in categories:
            keyboard.append([InlineKeyboardButton(cat_name, callback_data=f"category_{cat_id}")])
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_start")])
        
        await query.edit_message_text(
            "üèçÔ∏è –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_categories: {e}")

async def show_products(query, category_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    try:
        products = get_products_by_category(category_id)
        
        categories = get_categories()
        category_name = next((name for id, name in categories if id == category_id), "–ö–∞—Ç–µ–≥–æ—Ä–∏—è")
        
        if category_id == 1:  # –¢—é–Ω–∏–Ω–≥ - –ø—É—Å—Ç–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è
            text = f"üì¶ {category_name}\n\nüòî –í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –≤ –Ω–∞–ª–∏—á–∏–∏."
            keyboard = [
                [InlineKeyboardButton("üì¶ –ó–∞–∫–∞–∑–∞—Ç—å —Ç–æ–≤–∞—Ä", callback_data="pre_order")],
                [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")]
            ]
        else:  # –ö–∞—Ä–±—é—Ä–∞—Ç–æ—Ä—ã
            text = f"üì¶ {category_name} - –¢–æ–≤–∞—Ä—ã:\n\n"
            keyboard = []
            for product_id, name, description, price, photo in products:
                keyboard.append([InlineKeyboardButton(f"üõí {name} - {price}‚ÇΩ", callback_data=f"product_{product_id}")])
            
            keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back_to_categories")])
        
        await query.edit_message_text(
            text,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_products: {e}")

async def show_product(query, product_id):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–≤–∞—Ä–µ"""
    try:
        product = get_product_by_id(product_id)
        if not product:
            await query.answer("‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        product_id, name, description, price, photo, category_name = product
        
        buy_button = InlineKeyboardButton(f"üõí –ö—É–ø–∏—Ç—å –∑–∞ {price}‚ÇΩ", callback_data=f"buy_{product_id}")
        
        keyboard = [
            [buy_button],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data=f"category_2")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text(
            f"üèçÔ∏è *{name}*\n\n"
            f"{description}\n\n"
            f"üí∞ *–¶–µ–Ω–∞: {price}‚ÇΩ*",
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ show_product: {e}")

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ===
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if context.user_data.get('waiting_for_name'):
            await handle_name_input(update, context)
        elif context.user_data.get('waiting_for_phone'):
            await handle_phone_input(update, context)
        elif context.user_data.get('waiting_for_address'):
            await handle_address_input(update, context)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_message: {e}")

# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        print("üîÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        if not init_db():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ Web App HTML...")
        save_web_app_html()
        
        print("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        application = Application.builder().token(BOT_TOKEN).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", start))
        application.add_handler(CallbackQueryHandler(handle_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
        
        print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
        print("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã")
        print("üåê Web App URL:", WEB_APP_URL)
        
        application.run_polling()
        
    except Exception as e:
        print(f"üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}")

if __name__ == "__main__":
    main()
